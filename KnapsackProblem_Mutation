#!/usr/bin/python3.5
# -*-coding:Utf-8 -*

import random
import operator
import time
import matplotlib.pyplot as plt
import numpy as np

temps1 = time.time()

#genetic algorithm function
def generate_one_item(Max_weight, Max_value):
	item = []
	item.append(round(Max_weight * random.random()))
	item.append(round(Max_value * random.random()))
	return item
	
def generate_all_items(Number_of_item, Max_weight, Max_value):
	list_item = []
	for i in range(Number_of_item):
		list_item.append(generate_one_item(Max_weight, Max_value))
	return list_item

def total_weight_of_item_set(item_set):
	total_weight = 0
	for item in item_set:
		total_weight += item[0]
	return total_weight

def generate_one_individual(item_set):
	individual = []
	for i in range (len(item_set)):
		if (100 * random.random() < 50):
			individual.append(True)
		else:
			individual.append(False)
	return individual

def to_string_individual(individual):
	result = ""
	for boolean in individual:
		if (boolean):
			result += "T"
		else:
			result += "F"
	return result

def generate_individual_from_string(string_individual):
	result = []
	for letter in string_individual:
		if letter == 'F':
			result.append(False)
		else:
			result.append(True)
	return result

def generate_first_population(item_set, size_of_population):
	population = []
	for i in range(size_of_population):
		population.append(generate_one_individual(item_set))
	return population

def weight_of_individual(individual, item_set):
	weight = 0
	for i in range(len(individual)):
		if (individual[i]):
			weight += item_set[i][0]
	return weight
	
def value_of_individual(individual, item_set):
	value = 0
	for i in range(len(individual)):
		if (individual[i]):
			value += item_set[i][1]
	return value

def value(individual, item_set):
	Knapsack_Capacity = round(total_weight_of_item_set(item_set) / 2)
	result = 0
	if (weight_of_individual(individual, item_set) <= Knapsack_Capacity):
		result = value_of_individual(individual, item_set)
	return result 

def fitness(individual, item_set):
	Knapsack_Capacity = round(total_weight_of_item_set(item_set) / 2)
	result = 0
	if (weight_of_individual(individual, item_set) <= Knapsack_Capacity):
		result = value_of_individual(individual, item_set) - weight_of_individual(individual, item_set)
	return result

def sort_population_by_fitness(population, item_set):
	population_sorted = {}
	for individual in population:
		population_sorted[to_string_individual(individual)] = fitness(individual, item_set)
	return sorted(population_sorted.items(), key = operator.itemgetter(1), reverse = True)

def select_breeders(population_sorted, item_set, size_of_population):
	result = []
	best_individuals = size_of_population/5
	lucky_few = size_of_population/5
	for i in range(best_individuals):
		result.append(generate_individual_from_string(population_sorted[i][0]))
	for i in range(lucky_few):
		result.append(generate_individual_from_string(random.choice(population_sorted)[0]))
	random.shuffle(result)
	return result

def create_child(individual1, individual2):
	result = []
	for i in range(len(individual1)):
		if (100 * random.random() < 50):
			result.append(individual1[i])
		else:
			result.append(individual2[i])
	return result

def create_children(breeders, number_of_child):
	result = []
	for i in range(len(breeders) / 2):
		for j in range(number_of_child):
			result.append(create_child(breeders[i], breeders[len(breeders) - 1 -i]))
	return result
	
def evolve_several_generation_with_limited_time(item_set, size_of_population, number_of_child, time_limit):
	temps_init = time.time()
	value0 = 0
	result = []
	population = generate_first_population(item_set, size_of_population)
	value0 = max(value0, value(get_best_individual_in_population(population, item_set),item_set))
	result.append(value0)
	while(time.time()-temps_init < time_limit):
		population_sorted = sort_population_by_fitness(population, item_set)
		breeders = select_breeders(population_sorted, item_set, size_of_population)
		population = create_children(breeders, number_of_child)
		value0 = max(value0, value(get_best_individual_in_population(population, item_set),item_set))
		result.append(value0)
	return result

#analysis tools
def get_best_individual_in_population(population, item_set):
	return generate_individual_from_string(sort_population_by_fitness(population, item_set)[0][0])

#print result:
def mean_result_evolve(item_set, size_of_population, number_of_child, number_of_sample, mutationRate, time_limit):
	meanResult = 0
	for i in range (number_of_sample):
		temp = evolve_several_generation_with_limited_time(item_set, size_of_population, number_of_child, time_limit)
		meanResult += temp[len(temp) - 1]
	return (meanResult/number_of_sample)

def print_graph_size_of_population(Number_of_item, Max_weight, Max_value, number_of_child, number_of_sample, mutationRate, time_limit):
	item_set = generate_all_items(Number_of_item, Max_weight, Max_value)
	plt.title("size_of_population")
	graph = []
	for i in range(19):
		size_of_population = 5*(i+1)
		graph.append(mean_result_evolve(item_set, size_of_population, number_of_child, number_of_sample, mutationRate, time_limit))
	plt.plot(graph)
	plt.show()

#variables
#Knapsack_Capacity = item_set_total_weight / 2
Number_of_item = 10
Max_value = 10
Max_weight = 10

size_of_population = 5 * 3
number_of_child = 5
mutationRate = 0
time_limit = 0.01
number_of_sample = 10

#main
print_graph_size_of_population(Number_of_item, Max_weight, Max_value, number_of_child, number_of_sample, mutationRate, time_limit)

def test3():
	item_set = generate_all_items(Number_of_item, Max_weight, Max_value)
	mean_result_evolve(item_set, size_of_population, lucky_few, number_of_child, number_of_sample, mutationRate, time_limit)

def test2():
	item_set = generate_all_items(Number_of_item, Max_weight, Max_value)
	result = evolve_several_generation_with_limited_time(item_set, size_of_population, best_individuals, lucky_few, number_of_child, time_limit)
	plt.plot(result)
	plt.show()

print (time.time() - temps1)

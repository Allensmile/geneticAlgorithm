#!/usr/bin/python3.5
# -*-coding:Utf-8 -*

import random
import operator
import time
import matplotlib.pyplot as plt

temps1 = time.time()

#genetic algorithm function
def generate_one_item(Max_weight, Max_value):
	item = []
	item.append(round(Max_weight * random.random()))
	item.append(round(Max_value * random.random()))
	return item
	
def generate_all_items(Number_of_item, Max_weight, Max_value):
	list_item = []
	for i in range(Number_of_item):
		list_item.append(generate_one_item(Max_weight, Max_value))
	return list_item

def total_weight_of_item_set(item_set):
	total_weight = 0
	for item in item_set:
		total_weight += item[0]
	return total_weight

def generate_one_individual(item_set):
	individual = []
	for i in range (len(item_set)):
		if (100 * random.random() < 50):
			individual.append(True)
		else:
			individual.append(False)
	return individual

def to_string_individual(individual):
	result = ""
	for boolean in individual:
		if (boolean):
			result += "T"
		else:
			result += "F"
	return result

def generate_individual_from_string(string_individual):
	result = []
	for letter in string_individual:
		if letter == 'F':
			result.append(False)
		else:
			result.append(True)
	return result

def generate_first_population(item_set, size_of_population):
	population = []
	for i in range(size_of_population):
		population.append(generate_one_individual(item_set))
	return population

def weight_of_individual(individual, item_set):
	weight = 0
	for i in range(len(individual)):
		if (individual[i]):
			weight += item_set[i][0]
	return weight
	
def value_of_individual(individual, item_set):
	value = 0
	for i in range(len(individual)):
		if (individual[i]):
			value += item_set[i][1]
	return value

def fitness(individual, item_set):
	Knapsack_Capacity = round(total_weight_of_item_set(item_set) / 2)
	result = 0
	if (weight_of_individual(individual, item_set) <= Knapsack_Capacity):
		result = value_of_individual(individual, item_set)
	return result 

def sort_population_by_fitness(population, item_set):
	population_sorted = {}
	for individual in population:
		population_sorted[to_string_individual(individual)] = fitness(individual, item_set)
	return sorted(population_sorted.items(), key = operator.itemgetter(1), reverse = True)

def select_breeders(population_sorted, item_set, best_individuals, lucky_few):
	result = []
	for i in range(best_individuals):
		result.append(generate_individual_from_string(population_sorted[i][0]))
	for i in range(lucky_few):
		result.append(generate_individual_from_string(random.choice(population_sorted)[0]))
	random.shuffle(result)
	return result

def create_child(individual1, individual2):
	result = []
	for i in range(len(individual1)):
		if (100 * random.random() < 50):
			result.append(individual1[i])
		else:
			result.append(individual2[i])
	return result

def create_children(breeders, number_of_child):
	result = []
	for i in range(len(breeders) / 2):
		for j in range(number_of_child):
			result.append(create_child(breeders[i], breeders[len(breeders) - 1 -i]))
	return result

def evolve_one_generation(population, item_set, best_individuals, lucky_few, number_of_child):
	population_sorted = sort_population_by_fitness(population, item_set)
	breeders = select_breeders(population_sorted, item_set, best_individuals, lucky_few)
	return create_children(breeders, number_of_child)

def evolve_several_generation(population, item_set, best_individuals, lucky_few, number_of_child, number_of_generation):
	result = []
	result.append(population)
	for i in range(number_of_generation):
		result.append(evolve_one_generation(population, item_set, best_individuals, lucky_few, number_of_child))
	return result

#analysis tools
def compute_average_total_weight(size_sample, Number_of_item, Max_weight, Max_value):
	average_total_weight = 0
	for i in range (size_sample):
		item_set = generate_all_items(Number_of_item, Max_weight, Max_value)
		total_weight = total_weight_of_item_set(item_set)
		average_total_weight += total_weight
	print(average_total_weight/size_sample)
#size_sample = 100
#compute_average_total_weight(size_sample, Number_of_item, Max_weight, Max_value)

def get_best_individual_in_population(population, item_set):
	return generate_individual_from_string(sort_population_by_fitness(population, item_set)[0][0])

def get_Knapsack_capacity(item_set):
	return round(total_weight_of_item_set(item_set) / 2)

def get_best_individual_in_historic(historic, item_set):
	result = []
	fitness_result = -1;
	for generation in historic:
		best_in_generation = get_best_individual_in_population(generation, item_set)
		if (fitness(best_in_generation, item_set) > fitness_result):
			result = best_in_generation
			fitness_result = fitness(result, item_set)
	return result

#print result:
def print_individual_fitness_and_weight(individual, item_set):
	print "individual: " + to_string_individual(individual) + " of fitness: " + str(fitness(individual, item_set)) + " and weight: " + str(weight_of_individual(individual, item_set))

def print_Knapasack_capacity(item_set):
	print "Knapsack capacity is: " + str(get_Knapsack_capacity(item_set))

def graph_evolution_value_best_individual_of_generation_with_time(historic, item_set):
	plt.title("Value of best individual in generation")
	graph = []
	for generation in historic:
		graph.append(fitness(get_best_individual_in_population(generation, item_set), item_set))
	plt.plot(graph)
	plt.ylabel("Value")
	plt.xlabel("Generation")
	plt.show()

def graph_evolution_value_best_individual_since_beginning_with_time(historic, item_set):
	plt.title("Value of best individual since beginning")
	graph = []
	best_fitness = 0
	for generation in historic:
		if fitness(get_best_individual_in_population(generation, item_set), item_set) > best_fitness:
			best_fitness = fitness(get_best_individual_in_population(generation, item_set), item_set)
		graph.append(best_fitness)
	plt.plot(graph)
	plt.ylabel("Value")
	plt.xlabel("Generation")
	plt.show()

def print_evolution(historic, item_set):
	print_Knapasack_capacity(item_set)
	for generation in historic:
		print_individual_fitness_and_weight(get_best_individual_in_population(generation, item_set), item_set)

def print_best_solution_in_historic(historic, item_set):
	print "best individual in historic: "
	print_individual_fitness_and_weight(get_best_individual_in_historic(historic, item_set), item_set)

#variables
#Knapsack_Capacity = item_set_total_weight / 2
Number_of_item = 20
Max_value = 10
Max_weight = 10

size_of_population = 100
best_individuals = 20
lucky_few = 20
number_of_child = 5
number_of_generation = 50

#main
item_set = generate_all_items(Number_of_item, Max_weight, Max_value)
first_population = generate_first_population(item_set, size_of_population)
historic = evolve_several_generation(first_population, item_set, best_individuals, lucky_few, number_of_child, number_of_generation)

#graph_evolution_value_best_individual_of_generation_with_time(historic, item_set)
#graph_evolution_value_best_individual_since_beginning_with_time(historic, item_set)
print_Knapasack_capacity(item_set)
print_best_solution_in_historic(historic, item_set)

print time.time() - temps1

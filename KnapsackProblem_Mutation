#!/usr/bin/python3.5
# -*-coding:Utf-8 -*

import random
import operator
import time
import matplotlib.pyplot as plt

temps1 = time.time()

#genetic algorithm function
def generate_one_item(Max_weight, Max_value):
	item = []
	item.append(round(Max_weight * random.random()))
	item.append(round(Max_value * random.random()))
	return item
	
def generate_all_items(Number_of_item, Max_weight, Max_value):
	list_item = []
	for i in range(Number_of_item):
		list_item.append(generate_one_item(Max_weight, Max_value))
	return list_item

def total_weight_of_item_set(item_set):
	total_weight = 0
	for item in item_set:
		total_weight += item[0]
	return total_weight

def generate_one_individual(item_set):
	individual = []
	for i in range (len(item_set)):
		if (100 * random.random() < 50):
			individual.append(True)
		else:
			individual.append(False)
	return individual

def generate_first_population(item_set, size_of_population):
	population = []
	for i in range(size_of_population):
		population.append(generate_one_individual(item_set))
	return population

def weight_of_individual(individual, item_set):
	weight = 0
	for i in range(len(individual)):
		if (individual[i]):
			weight += item_set[i][0]
	return weight

#print result:

#variables
Knapsack_Capacity = 50 #equals item_set_total_weight / 2
Number_of_item = 5
Max_value = 100
Max_weight = 10
size_of_population = 100

#main
item_set = generate_all_items(Number_of_item, Max_weight, Max_value)
print(item_set)
population = generate_first_population(item_set, size_of_population)
individual = generate_one_individual(item_set)
print(individual)
print(weight_of_individual(individual, item_set))

#analysis tools
def compute_average_total_weight(size_sample, Number_of_item, Max_weight, Max_value):
	average_total_weight = 0
	for i in range (size_sample):
		item_set = generate_all_items(Number_of_item, Max_weight, Max_value)
		total_weight = total_weight_of_item_set(item_set)
		average_total_weight += total_weight
	print(average_total_weight/size_sample)
#compute_average_total_weight(100, Number_of_item, Max_weight, Max_value)

print time.time() - temps1
